package domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.JoinTable;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.validation.Valid;
import javax.validation.constraints.Min;

import org.hibernate.validator.constraints.Range;
import org.springframework.util.Assert;

@Entity
@Access(AccessType.PROPERTY)
public class ExamPaper extends DomainEntity{
	
	@Column(name = "mark")
	private Double mark;
	@Column(name = "score")
	private Integer score;
	@OneToOne
	@JoinTable(name = "Registration")
	private Collection<Registration> registers;
	@OneToMany
	@JoinTable(name= "Answer")
	private Collection<Answer> answers;
	
	
	public ExamPaper()
	{
		super();
		this.answers = new ArrayList<Answer>();
		this.registers = new HashSet<Registration>();
	}
	
	
	
	private Double computeSum(ArrayList<Answer> answers)
	{
		Double sum = 0.0;
		Integer i;
		
		for (i = 0; i < answers.size(); i++){
			sum += answers.get(i).getMark();
		}
		return sum;
	}

	@Min(0)
	public Double getMark()
	{
		return computeSum(this.answers);
	}
	
	@Range(min = 1, max = 99)
	public Integer getScore()
	{
		return this.score;
	}
	
	public void setMark(ArrayList<Answer> answers)
	{
		Assert.notNull(answers);
		this.mark = computeSum(answers);
	}
	
	
	public void setScore(Integer score)
	{
		if(score >= 1 || score <= 99){
			this.score = score;
		}
		else{
			System.out.println("Class ExamPaper: Score out of valid range.");
		}
	}
	
	@Valid
	public Collection<Answer> getAnswers()
	{
		return this.answers;
	}
	
	public void setAnswers(ArrayList<Answer> answers) {
		Assert.notNull(answers);
		this.answers = answers;
	}

	public void addAnswer(Answer answer)
	{
		Assert.notNull(answer);
		this.answers.add(answer);
	}
	
	public void removeAnswer(Answer answer)
	{
		Assert.notNull(answer);
		this.answers.remove(answer);
	}

	public Collection<Registration> getRegisters() {
		return registers;
	}

	public void setRegisters(HashSet<Registration> registers) {
		Assert.notNull(registers);
		this.registers = registers;
	}

}
